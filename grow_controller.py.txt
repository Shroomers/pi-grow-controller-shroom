#!/usr/bin/python

import RPi.GPIO as GPIO
import time
import board
import adafruit_scd4x

# --- Relay State Definitions for High-Level Trigger ---
# A HIGH signal turns the relay ON
# A LOW signal turns the relay OFF
RELAY_ON = GPIO.HIGH
RELAY_OFF = GPIO.LOW

# 1. --- Hardware GPIO Assignments (Mapped to Physical Relays) ---
OUTSIDE_FAN_PIN = 27  # Connected to IN4
INSIDE_FAN_PIN = 22   # Connected to IN3
HUMIDIFIER_PIN = 23   # Connected to IN2

# 2. --- Sensor and GPIO Initialization ---
i2c = board.I2C()
scd4x = adafruit_scd4x.SCD4X(i2c)
scd4x.start_periodic_measurement()

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

GPIO.setup(OUTSIDE_FAN_PIN, GPIO.OUT)
GPIO.setup(INSIDE_FAN_PIN, GPIO.OUT)
GPIO.setup(HUMIDIFIER_PIN, GPIO.OUT)

# Set all relays to the OFF state initially
GPIO.output(OUTSIDE_FAN_PIN, RELAY_OFF)
GPIO.output(INSIDE_FAN_PIN, RELAY_OFF)
GPIO.output(HUMIDIFIER_PIN, RELAY_OFF)

is_humidifying = False
is_venting_co2 = False

# 3. --- Main Control Loop ---
try:
    while True:
        if scd4x.data_ready:
            temperature_c = scd4x.temperature
            humidity = scd4x.relative_humidity
            co2 = scd4x.CO2
            temperature_f = temperature_c * (9/5) + 32

            print("--------------------")
            print(f"CO2: {co2} ppm")
            print(f"Temp: {temperature_c:.1f} C ({temperature_f:.1f} F)")
            print(f"Humidity: {humidity:.1f} %")
            print("--------------------")

            # --- Humidity Logic ---
            if humidity < 85:
                is_humidifying = True
            elif humidity >= 95:
                is_humidifying = False

            # --- CO2 Logic ---
            if co2 > 800:
                is_venting_co2 = True
            elif co2 <= 700:
                is_venting_co2 = False

            # --- Apply Relay States ---
            if is_humidifying:
                GPIO.output(HUMIDIFIER_PIN, RELAY_ON)
            else:
                GPIO.output(HUMIDIFIER_PIN, RELAY_OFF)

            if is_venting_co2:
                GPIO.output(OUTSIDE_FAN_PIN, RELAY_ON)
            else:
                GPIO.output(OUTSIDE_FAN_PIN, RELAY_OFF)

            if is_humidifying or is_venting_co2:
                GPIO.output(INSIDE_FAN_PIN, RELAY_ON)
            else:
                GPIO.output(INSIDE_FAN_PIN, RELAY_OFF)

        time.sleep(10)

except KeyboardInterrupt:
    print("Stopping controller and cleaning up GPIO.")
    GPIO.cleanup()

